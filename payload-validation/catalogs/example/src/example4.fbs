///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) typedef int GmbH and contributors.
//  All rights reserved. Licensed under the MIT open-source license.
//
///////////////////////////////////////////////////////////////////////////////

include "wamp.fbs";

namespace trading;


enum ClockMode: uint8
{
    /// Value is unset ("null").
    NONE = 0,

    /// Real-time clock mode.
    REALTIME = 1,

    /// Backtesting clock mode.
    BACKTEST = 2
}


struct ClockTick
{
    address: uint160_t (ethadr);

    mode: ClockMode;

    block: uint256_t (ethblock);

    sweep_no: uint32;

    tick_period: uint32;

    world_period: uint32;

    clock_ts: uint64 (timestamp);

    next_tick: uint32;

    tick_ts: uint64 (timestamp);

    world_ts: uint64 (timestamp);
}


table ClockTickSigned
{
    tick: ClockTick;

    signature: [uint8] (ethsig);
}


table ClockTickSimple
{
    counter: uint32;
    clock_ts: uint64 (timestamp);
}


/// Time period, eg to aggregate transaction data within.
enum PeriodDuration: uint8
{
    /// Value is unset ("null"). value ("null").
    NONE = 0,

    /// Virtual period "now" (0 seconds).
    NOW = 1,

    /// Virtual period of one block on a blockchain network (~12 seconds on Ethereum mainnet).
    BLOCK = 2,

    /// Time period of 100 ms.
    MS_100 = 3,

    /// Time period of 250 ms.
    MS_250 = 4,

    /// Time period of 500 ms.
    MS_500 = 5,

    /// Time period of one second.
    SECOND = 6,

    /// Time period of 5 seconds (5 seconds).
    SECONDS_5 = 7,

    /// Time period of 15 seconds (15 seconds).
    SECONDS_15 = 8,

    /// Time period of one minute (60 seconds).
    MINUTE = 9,

    /// Time period of 5 minutes (300 seconds).
    MINUTES_5 = 10,

    /// Time period of 5 minutes (600 seconds).
    MINUTES_10 = 11,

    /// Time period of 15 minutes (900 seconds).
    MINUTES_15 = 12,

    /// Time period of 15 minutes (1800 seconds).
    MINUTES_30 = 13,

    /// Time period of one hour (3600 seconds).
    HOUR = 14,

    /// Time period of one hour (7200 seconds).
    HOURS_2 = 15,

    /// Time period of four hours (14400 seconds).
    HOURS_4 = 16,

    /// Time period of six hours (21600 seconds).
    HOURS_6 = 17,

    /// Time period of eight hours (28800 seconds).
    HOURS_8 = 18,

    /// Time period of eight hours (43200 seconds).
    HOURS_12 = 19,

    /// Time period of one day (86400 seconds).
    DAY = 20,

    /// Time period of one week (7 * 86400 seconds).
    WEEK = 21,

    /// Time period of one month (30 * 86400 seconds).
    MONTH = 22,

    /// Time period of one quarter (3 * 30 * 86400 seconds).
    QUARTER = 23,

    /// Time period of one year (12 * 30 * 86400 seconds).
    YEAR = 24
}

/// A time period, specified by a start time and a period duration, optionally limited in number of records.
table Period
{
    /// Period to which the orderbook record applies for, using PeriodDuration.NOW for the current orderbook (within
    /// the current yet unfinished period). [primary key]
    period_dur: PeriodDuration;

    /// Last update for current orderbook or start time of period for order book history (epoch time in ns). [primary key]
    start_ts: uint64 (timestamp);

    /// Limit number of returned records to this many.
    limit: uint32 (kwarg);
}


/// Trades of assets on exchanges aggregated to periods. Primary key is ``(period_dur, start_ts, market_oid)``.
table Candle
{
    /// Period over which trades are aggregated. [primary key]
    period_dur: PeriodDuration;

    /// Start time of period (epoch time in ns). [primary key]
    start_ts: uint64 (timestamp);

    /// Database object ID of the market this tick was received for. [primary key]
    market_oid: [uint8] (uuid);

    /// Database transaction time (epoch time in ns) of insert or last update.
    modified: uint64 (timestamp);

    /// Total number of trades within the period.
    quantity: double;

    /// Total volume in trades within the period.
    volume: double;

    /// Opening price of trading pair for first trade within period.
    price_open: double;

    /// Closing price of trading pair for last trade within period.
    price_close: double;

    /// Minimum price of trading pair for any trade within period.
    price_min: double;

    /// Maximum price of trading pair for any trade within period.
    price_max: double;

    /// Average price of trading pair in all trades within period.
    price_avg: double;

    /// Variance of price of trading pair in all trades within period.
    price_var: double;

    /// Average of volume weighted price of trading pair in all trades within period.
    price_avg_volw: double;

    /// Variance of volume weighted price of trading pair in all trades within period.
    price_var_volw: double;
}


table CandleResult
{
    value: Candle;
}

/// Provides access to a persistent real-time replica of a limit order book maintained from
/// order book level-II updates published by one or more order book readers.
rpc_service ILimitOrderBookReplica (
    type: "interface",
    uuid: "6563cfac-498c-47cd-9ff1-24cbd0bdc6e5",
    wampuri: "eth.pydefi.replica.<uuid:replica>"
) {
    /// Write me.
    get_candle_history (Period): CandleResult (
        type: "procedure",
        wampuri: "book.<uuid:book>.get_candle_history"
    );
}
